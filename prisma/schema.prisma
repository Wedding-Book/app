// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  plans         Plan[]
  sharedPlans   SharedPlans[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SharedPlans {
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String
  plan   Plan   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId String

  @@unique([userId, planId])
}

model Plan {
  id               String            @id @default(cuid())
  groom            String?
  bright           String?
  bestMan          String?
  bridesMaid       String?
  name             String?
  description      String?
  eventDate        DateTime?
  createdAt        DateTime          @default(now())
  owner            User              @relation(fields: [ownerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  ownerId          String
  collaborators    SharedPlans[]
  invitationGuests InvitationGuest[]
  config           PlanConfig?       @relation(fields: [planConfigId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planConfigId     String?           @unique
  notes            String?
  todos            Todo[]
  hallPropositions Hall[]
  inspirations     Inspiration[]
  additionalCosts  AdditionalCost[]
  trips            Trip[]
  parentGift       ParentGift?
  guestGift        GuestGift?
}

model InvitationGuest {
  id        String  @id @default(cuid())
  planId    String
  plan      Plan    @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  guests    Guest[]
  moneyGift Int?
  otherGift String?
}

model Guest {
  id           String          @id @default(cuid())
  invitationId String
  invitation   InvitationGuest @relation(fields: [invitationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  fullName     String
}

model PlanConfig {
  id           String  @id @default(cuid())
  giftsEnabled Boolean @default(false)
  Plan         Plan?
}

model Todo {
  id     String     @id @default(cuid())
  Plan   Plan       @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId String
  value  String
  status TodoStatus @default(TODO)
}

enum TodoStatus {
  DONE
  TODO
}

model Hall {
  id                             String  @id @default(cuid())
  Plan                           Plan?   @relation(fields: [planId], references: [id])
  planId                         String?
  isPicked                       Boolean @default(false)
  name                           String
  description                    String?
  notes                          String?
  imgUrl                         String?
  googleUrl                      String?
  basePrice                      Int?
  personCost                     Int?
  additionalCost                 Int?
  partyTime                      String?
  alcoholInPrice                 Boolean @default(true)
  alcoholPrice                   Int?
  drinksInPrice                  Boolean @default(true)
  drinksPrice                    Int?
  desertsInPrice                 Boolean @default(true)
  desertsPrice                   Int?
  desertsDescription             String?
  menu                           String?
  isHotel                        Boolean @default(true)
  numberOfHotelGuests            Int?
  hotelPricePerPerson            Int?
  tableSettings                  String?
  decorationInPrice              Boolean @default(true)
  additionalDecorationPrice      Int?
  decorationDescription          String?
  soundSystem                    String?
  additionalAttractions          String?
  damagePrice                    String?
  organizationSupport            Boolean @default(true)
  organizationSupportDescription String?
  availableDates                 String?
  maxGuests                      Int?
  fruitsInPrice                  Boolean @default(true)
  fruitsPrice                    Int?
  childrenInPrice                Boolean @default(true)
  childrenPrice                  Int?
  extensionOfWedding             Boolean @default(true)
  extensionOfWeddingPrice        Int?
  advance                        Int?
  weddingCeremony                Boolean @default(true)
  weddingCeremonyDescription     String?
  weddingCeremonyPrice           Int?
}

model Inspiration {
  id     String  @id @default(cuid())
  url    String
  Plan   Plan?   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId String?
}

model Trip {
  id       String  @id @default(cuid())
  imgUrl   String
  offerUrl String?
  name     String
  price    Int?
  isPicked Boolean @default(false)
  Plan     Plan?   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId   String?
}

model ParentGift {
  id          String  @id @default(cuid())
  imgUrl      String?
  offerUrl    String?
  name        String
  description String
  quantity    Int     @default(4)
  price       Int
  plan        Plan    @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId      String  @unique
}

model GuestGift {
  id          String  @id @default(cuid())
  imgUrl      String?
  offerUrl    String?
  name        String
  description String
  price       Int
  plan        Plan    @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId      String  @unique
}

model AdditionalCost {
  id       String  @id @default(cuid())
  name     String
  price    Int
  quantity Int     @default(1)
  Plan     Plan?   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  planId   String?
}
